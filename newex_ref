1. Join Collections ($lookup)
# Join orders with users to Get Order Details with User Information

db.orders.aggregate([
    {
        $lookup: {
            from: "users",      # Collection to join
            localField: "user_id",  # Field in "orders"
            foreignField: "u_id",    # Field in "users"
            as: "user_info"    # Output field name
        }
    },
    {
        $unwind: "$user_info"  # Flatten the joined user data
    },
    {
        $project: {
            _id: 1,
            "user_info.name": 1,
            product_id: 1,
            quantity: 1,
            status: 1
        }
    }
])


2. Group By ($group)
#Get Total Orders Per User

db.orders.aggregate([
    {
        $group: {
            _id: "$user_id",  # Group by user_id
            totalOrders: { $sum: 1 }  # Count total orders per user
        }
    }
])


3. Sorting ($sort)
# Sort Orders by Quantity in Descending Order

db.orders.aggregate([
    { $sort: { quantity: -1 } }  # -1 for descending order
])


4. Combining Aggregation Operators
# Total Revenue from Each Product

db.orders.aggregate([
    {
        $lookup: {
            from: "products",
            localField: "product_id",
            foreignField: "_id",
            as: "product_details"
        }
    },
    { $unwind: "$product_details" },
    {
        $group: {
            _id: "$product_id",
            totalRevenue: { $sum: { $multiply: ["$quantity", "$product_details.price"] } }
        }
    },
    { $sort: { totalRevenue: -1 } }  # Sort by highest revenue
])


5. Filter & Aggregation ($match + $group)
# Total Sales for Only Delivered Orders

db.orders.aggregate([
    { $match: { status: "Delivered" } },  # Filter only delivered orders
    {
        $group: {
            _id: null,
            totalSales: { $sum: "$quantity" }
        }
    }
])
